###############################################################################
 # Copyright (c) 2012, Moitrayee Bhattacharyya, Kallol Gupta, Konkallu Hanumae Gowd, P. Balaram, Indian Institute of Science, Bangalore, India.
 # All rights reserved.
 # 
 # Redistribution and use in source and binary forms, with or without
 # modification are permitted provided that the following conditions are met:
 # 
 # (1) Redistributions of source code must retain the above copyright notice,
 # this list of conditions and the following disclaimer.
 # (2) Redistributions in binary form must reproduce the above copyright notice,
 # this list of conditions and the following disclaimer in the documentation
 # and/or other materials provided with the distribution.
 # (3) Neither the name of the Indian Institute of Science, Bangalore, India 
 # nor the names of its contributors may be used to endorse or promote products 
 # derived from this software without specific prior written permission.
 #  
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 # AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 # IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 # ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 # LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 # CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 # SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 # BUSINESSINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
 # IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 # ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 # POSSIBILITY OF SUCH DAMAGE.
 ##############################################################################

# This script filters out the generated fragments based on the chemical criteria #

use constant S_EMPTY    => '';
%name;
readpipe("rm -f cys_mass1 post_fil_sum_out");
#$amide=<STDIN>;
open(INIS,"<@ARGV[0]");
@hold=split('',@ARGV[0]);
$len=@hold;
$name_seq=@ARGV[0];

open(Read10,"mass_range");
@mass_hold=<Read10>;
close(Read10);
$mass_win=$mass_hold[0];

for($i=0;$i<$len;$i++)
{
   if( length($s) > 0 && $hold[$i] !~ /^\d/ ){
        push @new_hold, $s;
        $s = S_EMPTY;
   }
   $s .= $hold[$i];
  }
  if( length($s) > 0 ){
   push @new_hold, $s;
   $s = S_EMPTY;
  }
$len_p=@new_hold;
print $len_p,"\n";


for($lnd=0;$lnd<$len;$lnd++)
{
	if ($new_hold[$lnd]=~m/[a-z]/)
	{
		$my_opt=$new_hold[$lnd];
		print "$my_opt\n";
		# print "Enter the mass to be added for cterm $spb\n";
 		$name{$my_opt}=<STDIN>;
	}
}


for ($j=0;$j<$len;$j++)
{
	if ($hold[$j]=~m/\d/)
	{
 		$too++;
	}
}
$len1=$len-$too;
$too1=$name_seq=~s/C/$3/gi;
open(R1,"peak_mass");
@peak=<R1>;
close(R1);
foreach $run(@peak)
{#print $run;
	$run=~s/\n//g;
	open(W,">>post_fil_sum_out");
	$mb=0;
	open(Read,"<mass_list");
	@var=<Read>;
	close(Read);
	open(R,"remap2.out");
	@hold=<R>;
	close(R);
	foreach $line (@hold)
	{   
		$line=~s/\n//g;  @ele=split('	',$line); $gag[0]=$ele[0]; @garg=split(' \| ',$ele[0]); $ele[0]=~s/ \| //g; $len2=@garg; @ele1=split('',$ele[0]); $len=@ele1;
		for($i=0;$i<$len;$i++)
		{
   			if( length($s) > 0 && $ele1[$i] !~ /^\d/ )
			{
        			push @new_ele1, $s;
        			$s = S_EMPTY;
   			}
   			$s .= $ele1[$i];
  		}
  		if( length($s) > 0 )
		{
			push @new_ele1, $s;
   			$s = S_EMPTY;
  		}
		$len_p=@new_ele1;
#		print $new_ele1[0],"\n";
		if ($len2 > 1)
		{ 
			for ($i=0;$i<$len_p;$i++)
			{ 
				foreach $line1(@var) 
				{
					$line1=~s/\n//g; @mass=split('\t',$line1);
   					if ($new_ele1[$i]=~m/$mass[0]/)
     					{ 
						$sum=$sum+$mass[1]; 
						print "$new_ele1[$i]	$sum\n";
					}
				}
				if ($new_ele1[$i]=~m/[a-z]/)
				{
					$cterm_sum=$new_ele1[$i];
					$sum=$sum+$name{$cterm_sum};
					print "$new_ele1[$i] $cterm_sum\n";
				}
			}
			$sum=$sum+((($len2-1)*204)+$len2);
			$kal_1=$ele[0];
			$count_cterm=$kal_1=~s/[a-z]/$1/g;
    			$sum=$sum-($len2-$count_cterm-1);
			$nt1=$ele[3]+$ele[4]+$ele[5]+$ele[6];
			$ntot=$nt1-(($len2-1)*2); $qp=$too1-(($len2-1)*2); $rs=$qp/2;
			if ($ntot == $qp)
			{

				print "$ntot $qp\n"; 
				$sum=$sum+(($ntot/2)*204);  $trp1=$run-$mass_win;   $trp2=$run+$mass_win;
				print "$sum\n";
				if (($sum <= $trp2) && ($sum >= $trp1))
				{  
					print W  "$gag[0]	$sum\n"; 
				}
			}
			if ($ntot == 0)
			{ 
				$trp1=$run-$mass_win;  $trp2=$run+$mass_win;
				if (($sum <= $trp2) && ($sum >= $trp1))
				{
					print W  "$gag[0]	$sum\n";
				}
			}
			if (($ntot != 0) && ($ntot != $qp))
			{ 
				$x=$ntot;
 				open(W1,">>cys_mass1");
  				@mass_c=(69,135,103,101);
  				my $wa=69.0;  my $wb=135.0;  my $wc=103.0;  my $wd=101.0;  my $a=0;
				for ($i=0;$i<=$x;$i++)
				{ 
					$r=$x-$i;
    					for ($j=0;$j<=$r;$j++)
					{   
						$y=$x-$i-$j;
						for ($o=0;$o<=$y;$o++)
						{   
							$e=$x-$i-$j-$o;
							for ($p=0;$p<=$e;$p++)
							{   
								$f=$i+$j+$o+$p;
								if (($f >= $x) && (($i <= $rs) && ($j <= $rs) && ($o <= $rs) && ($p <= $rs)))
								{   
									print W1 "$i   $j      $o      $p\n";
    									$Wcys[$a]=($i*$wa)+($j*$wb)+($o*$wc)+($p*$wd);
    									$pos[$a]=$i.$j.$o.$p;
    									$a++; }}}}}
				for($u=0;$u<$a;$u++)
				{  
					print W1 $Wcys[$u],"\n";
   					$sum1=$sum+$Wcys[$u];
   					$trp2=$run+$mass_win; $trp1=$run-$mass_win;
					#   print "$sum1   $trp2 $trp1 $run\n";
					if (($sum1 <= $trp2) && ($sum1 >= $trp1))
					{ 
   						@gh=split('',$pos[$u]);
   						$pen1=$gh[0]*$mass_c[0]; $pen2=$gh[1]*$mass_c[1]; $pen3=$gh[2]*$mass_c[2]; 
   						$pen4=$gh[3]*$mass_c[3]; $pen5=$pen1+$pen2+$pen3+$pen4;  $pen6=$too1*102;
						if ($pen5 <= $pen6)
						{  
							print  W "$gag[0]	$sum1	$pen1|$pen2|$pen3|$pen4\n";
						}
					}
   					$sum1=0;  
				}
			}
		}
		else
		{ 
			if ($ele[0] =~m/[a-z]/)
  			{ 
				$ele[1]=$ele[1]+2;  $trp1=$run-$mass_win; $trp2=$run+$mass_win; 
			}
			else
			{ 
				$ele[1]=$ele[1]+1; $trp2=$run+$mass_win; $trp1=$run-$mass_win; 
			}
			if (($ele[1] <= $trp2) && ($ele[1] >= $trp1))
			{
  				$pen6=$too1*102;
  				@kgl=split('\|',$ele[2]);
  				$pen7=$kgl[0]+$kgl[1]+$kgl[2]+$kgl[3];
  				if ($pen7 <= $pen6)
				{  
					print W "$gag[0]	$ele[1]	$ele[2]\n";

				}
			}
		}
		$sum=0;
		splice(@new_ele1,0,$len_p);
	}
} 
